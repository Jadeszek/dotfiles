#!/usr/bin/env zsh

# where to install to?
target="${target:-$HOME}"
# dependencies of this script
make_dependencies=(stow zsh)
# options for stow
stow_options=(--target="$target" --ignore='df-build.zsh')
logfile=${logfile:-/dev/null}

define_presets() {
  # populate the auto_plugins array
  [[ -d $HOST ]] && auto_plugins=($HOST)

  [[ $OSTYPE =~ ".*gnu.*" ]]     && auto_plugins+=("gnu")
  [[ $OSTYPE =~ ".*freebsd.*" ]] && auto_plugins+=("freebsd")
  # work around a bug in stow
  [[ $OSTYPE =~ ".*freebsd.*" ]] && stow_options=(--ignore='df-build.zsh')

  which "pacman"   &>/dev/null && auto_plugins+=("archlinux")

  which "ack"      &>/dev/null && auto_plugins+=("ack")
  which "ack-grep" &>/dev/null && auto_plugins+=("ack")
  which "aunpack"  &>/dev/null && auto_plugins+=("atool")
  which "git"      &>/dev/null && auto_plugins+=("git")
  git_depends=(tig)
  which "hg"       &>/dev/null && auto_plugins+=("hg")
  which "keychain" &>/dev/null && auto_plugins+=("keychain")
  which "ruby"     &>/dev/null && auto_plugins+=("ruby")
  which "svn"      &>/dev/null && auto_plugins+=("svn")
  which "tmux"     &>/dev/null && auto_plugins+=("tmux")
  tmux_depends=(urlview)

  # definition of the presets
  small=(base $auto_plugins)
  medium=($small autoenv vim)
  huge=($medium xorg ratpoison openbox)

  # dependecies
  base_depends=(less)
  vim_depends=(vim ctags python)

  # remove duplicates
  typeset -U small medium huge auto_plugins
}

# functions {{{

# issue a message and die
die() {
  echo $1
  exit 1
}

# link the plugins with stow
deploy() {
  echo "The following plugins will be installed to $target:"
  echo "$@"
  read -q "?Continue? " || exit 1
  echo ""

  while [[ -n ${1} ]]; do
    # run buildscript
    if [[ -f ${1}/df-build.zsh ]]; then
      source ${1}/df-build.zsh
      echo -n "-> building $1..."
      build_${1}
    fi

    # check dependecies
    dependencies=${1}_depends
    [[ -n ${(P)dependencies} ]] && \
      check_env ${(P)dependencies}

    # link
    echo "linking ${1}"
    stow ${stow_options} -R ${1}
    shift
  done
}

# clean up
clean() {
  echo "Cleaning symlinks from $target"
  stow ${stow_options} -D *(/)

  # call all clean scripts
  if [[ $1 == "-r" ]]; then
    for i in *; do
      if [[ -f $i/df-build.zsh ]]; then
        source $i/df-build.zsh
        clean_$i
      fi
    done
  fi
}

# check if a program can be found
check_env() {
  while [[ -n ${1} ]]; do
    if ! which $1 &>/dev/null; then
      missing_dependencies+=(${1})
      ${finish:-echo} "[!] $1 not found"
    fi
    shift
  done
}

check_make_env() {
  finish=die check_env $*
}

# }}}
# main {{{

# cd to basedir of the script
cd `dirname $0`
# check for missing dependencies
check_make_env $make_dependencies
# load preset definitions
define_presets
# load build/clean scripts
source */df-build.zsh

# read parameters
case "$1" in
  "small" | "s")
    deploy $small
    ;;
  "medium" | "m")
    deploy $medium
    ;;
  "huge" | "h")
    deploy $huge
    ;;
  "clean" | "c")
    clean $2
    ;;
  *)
    echo "Usage: $0 {small|medium|huge|clean [-r]}"
    ;;
esac

[[ -n $missing_dependencies ]] && \
  echo "The following executables are missing" &&
  echo "$missing_dependencies"

# back to where we were
cd -

# }}}

