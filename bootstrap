#!/usr/bin/env zsh
emulate zsh

# where to install to?
target="${target:-$HOME}"
# dependencies of this script
make_dependencies=(stow zsh)
# options for stow
stow_options=(--target="$target")
logfile=${logfile:-/dev/null}

define_presets() {
  # populate the auto_plugins array
  [[ -d $HOST ]] && auto_plugins=($HOST)

  [[ $OSTYPE =~ ".*gnu.*" ]]     && auto_plugins+=("gnu")
  [[ $OSTYPE =~ ".*freebsd.*" ]] && auto_plugins+=("freebsd")
  # work around a bug in stow
  [[ $OSTYPE =~ ".*freebsd.*" ]] && stow_options=(--ignore='df-build.zsh')

  which "pacman"   &>/dev/null && auto_plugins+=("archlinux")
  archlinux_depends=(pkgfile)
  which "aptitude" &>/dev/null && auto_plugins+=("aptitude")

  which "ack"      &>/dev/null && auto_plugins+=("ack")
  which "ack-grep" &>/dev/null && auto_plugins+=("ack")
  which "aunpack"  &>/dev/null && auto_plugins+=("atool")
  which "git"      &>/dev/null && auto_plugins+=("git")
  git_depends=(tig)
  which "hg"       &>/dev/null && auto_plugins+=("hg")
  which "keychain" &>/dev/null && auto_plugins+=("keychain")
  which "ruby"     &>/dev/null && auto_plugins+=("ruby")
  which "svn"      &>/dev/null && auto_plugins+=("svn")
  which "tmux"     &>/dev/null && auto_plugins+=("tmux")
  tmux_depends=(urlview)

  # definition of the presets
  small=(base $auto_plugins)
  medium=($small vim zsh-syntax)
  huge=($medium xorg)

  # populate the huge array
  which openbox   &>/dev/null && huge+=("openbox")
  which ratpoison &>/dev/null && huge+=("ratpoison")

  # dependecies
  base_depends=(less dfc)
  vim_depends=(vim ctags python)

  # TODO: there are more than those
  xorg_depends=(autorandr xbindkeys openbox)
  openbox_depends=(udevedu nitrogen compton stalonetray conky pasystray)
  ratpoison_depends=(udevedu nitrogen compton stalonetray conky pasystray)

  # remove duplicates
  typeset -U small medium huge auto_plugins
}

#------------------------------------------------------------------------------#
#                               basic functions                                #
#------------------------------------------------------------------------------#

# issue a message and die
die() {
  echo $1
  exit 1
}

# check if a program can be found
check_env() {
  while [[ -n ${1} ]]; do
    if ! which $1 &>/dev/null; then
      missing_dependencies+=(${1})
      ${finish:-echo} "[!] $1 not found"
    fi
    shift
  done
}
check_make_env() {
  finish=die check_env $*
}

# link the plugins with stow
deploy() {
  echo "The following plugins will be installed to $target:"
  echo "$@"
  read -q "?Continue? " || exit 1
  echo ""

  while [[ -n ${1} ]]; do
    # run buildscript
    if [[ -f ${1}-build.zsh ]]; then
      source ${1}-build.zsh
      echo -n "-> building $1..."
      build_${1}
      # cd back to the repo in case we forgot in the buildscript
      cd `dirname $0`
    fi

    # check dependecies
    dependencies=${1}_depends
    [[ -n ${(P)dependencies} ]] && \
      check_env ${(P)dependencies}

    # link
    echo "linking ${1}"
    stow ${stow_options} -R ${1}
    shift
  done
}

# common used git checkout
clone_git() {
# clone_git name url dir
# name: name of plugin
# url:  git remote url
# dir:  directory to clone to
  check_make_env git

  local name="$1"
  local git_url="$2"
  local dir="$3"

  echo "\n--- plugin $name on `date` ---" &>>$logfile

  # try to update, if the $dir already exists
  if [[ -d "$dir" ]]; then
    echo -n "update..."
    cd "$dir"
    git pull &>>$logfile || {
      echo "failed!"
      cd -
      return 1
    }
    cd -
  else
    # clone if nonexistent
    echo -n "clone..."
    git clone "$git_url" "$dir" &>>$logfile || {
      echo "failed!"
      cd -
      return 1
    }
    cd -
  fi
}

# clean up
clean() {
  echo "Cleaning symlinks from $target"
  stow ${stow_options} -D *(/)

  # call all clean scripts
  if [[ $1 == "-r" ]]; then
    for i in *; do
      if [[ -f ${i}-build.zsh ]]; then
        source ${i}-build.zsh
        clean_$i
      fi
    done
  fi
}

# delete $1 interactively
clean_dir() {
  if [[ -d "$1" ]]; then
    read -q "?Delete $1? " && rm -rf "$1"
    echo ""
  fi
}

#------------------------------------------------------------------------------#
#                                     main                                     #
#------------------------------------------------------------------------------#

# cd to basedir of the script
old_pwd=$(pwd)
cd `dirname $0`
# check for missing dependencies
check_make_env $make_dependencies
# load preset definitions
define_presets

# read parameters
case "$1" in
  "small" | "s")
    deploy $small
    ;;
  "medium" | "m")
    deploy $medium
    ;;
  "huge" | "h")
    deploy $huge
    ;;
  "clean" | "c")
    clean $2
    ;;
  *)
    echo "Usage: $0 {small|medium|huge|clean [-r]}"
    ;;
esac

[[ -n $missing_dependencies ]] && \
  echo "The following executables are missing" &&
  echo "$missing_dependencies"

cd $old_pwd

