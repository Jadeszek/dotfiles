
#
# .zsh/functions
# Maintainer:	Philipp Millar <philipp.millar@gmx.de>
#

# witty one-liners {{{
# cd to directory and list files
cdl() { cd $1 && l }
# create dir(s) and cd to the first one
mcd() { mkdir -p $@ && cd $1 }

# colorful ls in less
ll() { ls -lAhB --color=always "$@" | less -r }
# count the files/folders in a directory
lc() { ls "$@" | wc -l }
# count (almost) all
lca() { ls -A "$@" | wc -l }

# convert nfo files to utf8
nfo() { iconv -f 437 -t UTF8 "$@" | less }

# grep the history
hist() { fc -fl -m "*(#i)$1*" 1 | grep -i --color $1 }

# list explicitly installed packages that are not in base or base-devel
paclist() { pacman -Qei | awk '/^Name/ { name=$3 } /^Groups/ { if ( $3 != "base" && $3 != "base-devel" ) { print name } }' }
# }}}
# create a dir in tmp and cd to it {{{
cdtmp() {
    local t
    t=$(mktemp -d)
    echo $t
    builtin cd $t
} #}}}
# note taking {{{
NOTEDIR=$HOME/.pim/notes
EDITORARGS=("+set ft=asciidoc")

# open note or make new one
n() { $EDITOR $EDITORARGS $NOTEDIR/"$*" }
compdef "_path_files -W $NOTEDIR" n

# list notes or search for title
nl() { ls $NOTEDIR | grep "$*" }

# delete a note
nd() { rm -rf $NOTEDIR/$* }
compdef "_path_files -W $NOTEDIR" nd

# search content
nf() {
    if [[ -n $* ]]; then
	# to prevent grep from displaying the whole path
	cd $NOTEDIR
	grep -rni "$*" *
	popd >/dev/null
    fi
}
#}}}
# make decisions for me! {{{
# flip a coin
yn(){
    print -n "thinking"
    for i in {1..4}; do
	print -n "."
	sleep 0.3
    done
    shuf -n 1 -e 'Yes!' 'No!'
}
# decide from file
decide(){
    if [[ -f $1 ]]; then
	print -n "thinking"
	for i in {1..4}; do
	    print -n "."
	    sleep 0.3
	done
	print "" # newline
	shuf -n 1 $1
    else
	print 'there is nothing to decide!'
    fi
}
#}}}
# git addremove{{{
git-addremove(){
    git add .
    git ls-files -deleted | xargs git rm
}
#}}}
# zle-functions {{{
# jump behind the first word on the cmdline
jump_after_first_word() {
    local words
    words=(${(z)BUFFER})

    if (( ${#words} <= 1 )) ; then
        CURSOR=${#BUFFER}
    else
        CURSOR=${#${words[1]}}
    fi
}
zle -N jump_after_first_word

# prepend sudo
run-with-sudo () { LBUFFER="sudo $LBUFFER" }
zle -N run-with-sudo
#}}}

# vim:set sw=4 foldmethod=marker ft=zsh:
