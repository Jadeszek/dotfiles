#compdef git-bug
#description create a bug branch

__git_command_successful () {
    if (( ${#pipestatus:#0} > 0 )); then
        _message 'not a git repository'
        return 1
    fi
    return 0
}
__git_bug_branch_names() {
    local expl
    declare -a branch_names
    branch_names=(${${(f)"$(_call_program branchrefs git for-each-ref --format='"%(refname)"' refs/heads/bug 2>/dev/null)"}#refs/heads/bug/})
    __git_command_successful || return
    _wanted branch-names expl branch-name compadd $* - $branch_names
}

local curcontext=$curcontext state line ret=1
declare -A opt_args

_arguments -C \
    ': :->command' \
    '*:: :->option-or-argument' && ret=0

case $state in
    (command)
        declare -a commands
        commands=(
            'finish:merge bug into the current branch'
        )
        _describe -t commands command commands && ret=0
        ;;
    (option-or-argument)
        curcontext=${curcontext%:*}-$line[1]:
        case $line[1] in
            (finish)
                _arguments -C \
                    ':branch-name:__git_bug_branch_names'
                ;;
        esac
esac
